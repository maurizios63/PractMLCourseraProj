summary(preproc)
preproc <- preProcess(x,method="pca",thresh = 80)
summary(preproc)
preproc <- preProcess(x,method="pca",pcaComp = 2)
summary(preproc)
View(x)
View(x)
x <- training[,grepl("^IL",names(training))]
View(x)
View(x)
View(x)
preproc <- preProcess(x,method="pca",pcaComp = 5)
summary(preproc)
preproc$dim
preproc$pcaComp
preproc <- preProcess(x,method="pca",thresh = 0.8)
preproc$pcaComp
preproc <- preProcess(x,method="pca",thresh = 80)
preproc$pcaComp
preproc <- preProcess(x,method="pca",thresh = 100)
preproc$pcaComp
preproc <- preProcess(x,method="pca",pcaComp = 12)
preproc$std
preproc$pcaComp
summary(preproc)$pcaComp
summary(preproc$pcaComp)
preproc[,1]
preproc <- preProcess(x,method="pca",pcaComp = 5)
preproc$pcaComp
preproc <- preProcess(x,method="pca",thresh = 0.9)
preproc$pcaComp
preproc <- preProcess(x,method="pca",thresh = 1)
preproc$pcaComp
preproc <- preProcess(x,method="pca",pcaComp = 12)
preproc$pcaComp
preproc <- preProcess(x,method="pca",pcaComp = 5)
preproc$pcaComp
preproc$std
y <- predict(preproc,x)
View(y)
View(y)
preproc <- preProcess(x,method="pca",thresh=0.8)
y <- predict(preproc,x)
preproc <- preProcess(x,method="pca",thresh=0.9)
y <- predict(preproc,x)
preproc <- preProcess(x,method="pca",thresh=0.8)
View(y)
View(y)
preproc <- preProcess(x,method="pca",thresh=0.7)
y <- predict(preproc,x)
preproc <- preProcess(x,method="pca",thresh=0.2)
y <- predict(preproc,x)
preproc <- preProcess(x,method="pca",thresh=0.85)
y <- predict(preproc,x)
preproc <- preProcess(x,method="pca",thresh=0.81)
y <- predict(preproc,x)
preproc <- preProcess(x,method="pca",thresh=0.80)
y <- predict(preproc,x)
View(x)
View(x)
mod2 <- data.frame(x,diagnosis)
View(training)
View(training)
mod2 <- data.frame(x,training$diagnosis)
View(mod2)
View(mod2)
View(mod2)
View(mod2)
pred2 <- trainIndex(diagnosis~.,data=mod2,method="glm")
pred2 <- train(diagnosis~.,data=mod2,method="glm")
View(mod2)
View(mod2)
pred2 <- train(training.diagnosis~.,data=mod2,method="glm")
pred2 <- train(diagnosis~.,data=training,method="glm")
install.packages("e1071")
pred2 <- train(diagnosis~.,data=training,method="glm")
pred2 <- train(training.diagnosis~.,data=mod2,method="glm")
testpred2 <- testing[,glob2rx("IL*")]
View(testing)
View(testing)
testpred2 <- testing[,grepl("^IL",names(testing))]
testPc2 <- predictors(pred2,testpred2)
source('~/PractQ2-4.R', echo=TRUE)
confusionMatrix(testing$diagnosis,predict(modelNoPc,testNoPc))
trainNoPc <- training[,grepl("^IL",names(training))]
testNoPc <- training[,grepl("^IL",names(testing))]
View(testing)
source('~/PractQ2-4.R', echo=TRUE)
source('~/PractQ2-4.R', echo=TRUE)
testPca <- predict(modelPca,testNoPc)
testPca <- predict(modelPca,testNoPc)
testPca <- predict(preprocPca,testNoPc)
testPca <- predict(modelPca,testNoPc
)
testPca <- predict(preprocPca,testNoPc)
confusionMatrix(testing$diagnosis,predict(modelPca,testPca))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
View(segmentationOriginal)
trainDf <- segmentationOriginal(case==Train)
traindDf = subset(segmentationOriginal,Case == Train)
traindDf = subset(segmentationOriginal,Case == "Train")
testDf = subset(segmentationOriginal,Case == "Train")
modFit <- train(Class~.,data=traindDf)
ยง
modFit <- train(Class~.,data=traindDf,method=rpart)
library(rpart)
modFit <- train(Class~.,data=traindDf,method=rpart)
modFit <- train(Class~.,data=traindDf,method=lm)
modFit <- train(Class~.,data=traindDf,method="rpart")
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(rpart.plot)
install.packages("rpart.plot")
fancyRpartPlot(modFit$finalModel)
View(traindDf)
View(traindDf)
print(modFit$finalModel)
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
View(olive)
View(olive)
olive = olive[,-1]
View(olive)
View(olive)
modFit3 <- train(Area~.,data=olive,method="rpart")
newdata = as.data.frame(t(colMeans(olive)))
View(newdata)
View(newdata)
print(modFit3$finalModel)
modFit3 <- train(Area~.,data=olive,method="rpart")
predict(modFIt3,newdata)
predict(modFit3,newdata)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
View(trainSA)
View(trainSA)
testSa.names
testSa.names()
trainSA.names
names(trainSA)
modFit <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
library(caret)
modFit <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
print modFit
summary(modFit)
prediction <- predict(modFit,trainSA)
prediction
values = trainSA$chd
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
missClass(values,prediction)
predictionTest <- predict(modFit,testSA)
valuesTest <- testSA$chd
missClass(valuesTest,predictionTest)
missClass(valuesSA,predictionSA)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
$
source('~/.active-rstudio-document', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source('~/ML_Q4_W*.R', echo=TRUE)
source('~/ML_Q4_W*.R', echo=TRUE)
data(vowel.train)
data(vowel.test)
modFit <- train(y~~.,data=vowel.train,method="rf")
View(vowel.train)
View(vowel.train)
modFit <- train(y~.,data=vowel.train,method="rf")
modFit <- train(y~.,data=vowel.train,method="rf")
x <- varImp(modFit)
varImp(modFit)
print(modFit)
print(modFit,useModel=true)
varImp(modFit,useModel="true")
varImp(modFit$finalModel,useModel="true")
modFit <- train(y~.,data=vowel.train,method="rf",importance=True)
modFit <- train(y~.,data=vowel.train,method="rf",importance=True)
modFit <- train(y~.,data=vowel.train,method="rf")
varImp(modFit$finalModel,useModel="true")
x <- vowel.train
modFit <- train(y~.,data=x,method="rf",importance=TRUE)
varImp(modFit$finalModel,useModel="true")
y <- varImp(modFit$finalModel,useModel="true")
View(y)
View(y)
order(y)
order(y,decreasing=TRUE)
trainSet <- vowel.train
set.seed(33833)
View(trainSet)
View(trainSet)
modFit <- train(y~.,data=trainSet,method="rf",importance=True)
modFit <- train(y~.,data=trainSet,method="rf",importance=True)
x <- vowel.train
modFit <- train(y~.,data=x,method="rf",importance=TRUE)
modFit2 <- train(y~.,data=trainSet,method="rf",importance=TRUE)
View(y)
View(y)
View(y)
z <- varImp(modFit)
z <- varImp(modFit2)
data(vowel.train)
data(vowel.test)
trainSet <- vowel.train
set.seed(33833)
modFit <- train(y~.,data=trainSet,method="rf",importance=True)
warnings()
modFit <- train(y~.,data=trainSet,method="rf",importance=TRUE)
imp <- varImp(modFit)
order(imp,decreasing=TRUE)
View(trainSet)
View(trainSet)
summary(imp)
imp <- varImp(modFit)
imp <- varImp(modFit$finalModel)
View(imp)
View(imp)
order(imp,decreasing=TRUE)
set.seed(33833)
modFit <- train(y~.,data=trainSet,method="rf",importance=TRUE)
imp <- varImp(modFit$finalModel,useModel=TRUE)
order(imp,decreasing=TRUE)
order(varImp(modFit$finalModel,useModel=TRUE))
order(varImp(modFit$finalModel,useModel=TRUE))
imp <- varImp(modFit$finalModel,useModel=TRUE)
View(imp)
View(imp)
imp <- varImp(modFit,scale=TRUE)
imp
testSet <- vowel.test
set.seed(33833)
modFit <- train(y~.,data=trainSet,method="rf",importance=TRUE)
summary(modFit)
summary(modFit.importance)
varImp(modFit)
varImp(modFit)
varImp(modFit$finalModel)
varImp(modFit$finalModel,scale=TRUE)
importance(modFit)
importance(modFit$finalModel)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
#trainSet <- vowel.train
set.seed(33833)
modFit <- train(y~.,data=vowel.train,method="rf",importance=TRUE)
imp <- varImp(modFit,scale=TRUE)
#order(imp,decreasing=TRUE)
imp
varImp(modFit$finalModel)
modFit <- train(factor(y)~.,data=vowel.train,method="rf",importance=TRUE)
varImp(modFit)
varImp(modFit$finalModel)
varImp(modFit$finalModel,scale=TRUE)
varImp(modFit$,scale=TRUE)
varImp(modFit,scale=TRUE)
View(vowel.train)
View(vowel.train)
getwd
getwd()
setwd("Documents/RCourse/PractMLCourseraProj/")
list.files()
list.files("../CourseraMLProject/")
list.files("../")
trainDf <- read.csv2("../MLProject/pml-training.csv")
drop <- c("user_name","raw_timestamp_part_1","raw_timestamp_part_2",
"cvtd_timestamp","new_window","num_window")
trainDfR1 <- trainDf[,!(names(trainDf) %in% drop)]
trainDfR1
thr = 0.97
dropCol = names(trainDfR1[,!(names(trainDfR1) == "classe")])
for (colName in names(trainDfR1[,!(names(trainDfR1) == "classe")])) {
x <- as.numeric(as.character(trainDfR1[[colName]]))
vld <- sum(is.finite(x))/length(trainDfR1[[colName]])
#cat(sprintf("%s %f\n",colName,vld))
if (vld > thr) {
dropCol <- dropCol[!dropCol == colName]
}
}
cat(sprintf("Dropped columns %s",length(dropCol)))
trainDfR2 <- trainDf[,!(names(trainDfR1) %in% dropCol)]
trainDfR1 <- trainDf[,!(names(trainDf) %in% drop)]
View(trainDf)
View(trainDf)
trainDf <- read.csv2("../MLProject/pml-training.csv")
View(trainDf)
View(trainDf)
trainDf <- read.csv2("../MLProject/pml-training.csv",sep",")
trainDf <- read.csv2("../MLProject/pml-training.csv",sep=",")
drop <- c("user_name","raw_timestamp_part_1","raw_timestamp_part_2",
"cvtd_timestamp","new_window","num_window")
trainDfR1 <- trainDf[,!(names(trainDf) %in% drop)]
thr = 0.97
dropCol = names(trainDfR1[,!(names(trainDfR1) == "classe")])
for (colName in names(trainDfR1[,!(names(trainDfR1) == "classe")])) {
x <- as.numeric(as.character(trainDfR1[[colName]]))
vld <- sum(is.finite(x))/length(trainDfR1[[colName]])
#cat(sprintf("%s %f\n",colName,vld))
if (vld > thr) {
dropCol <- dropCol[!dropCol == colName]
}
}
cat(sprintf("Dropped columns %s",length(dropCol)))
trainDfR2 <- trainDf[,!(names(trainDfR1) %in% dropCol)]
library(caret)
set.seed(3223)
folds <- createFolds(y=trainnDfR2$classe,k=10,list=True,returnTraimn=True)
set.seed(3223)
folds <- createFolds(y=trainnDfR2$classe,k=10,list=True,returnTrain=True)
set.seed(3223)
folds <- createFolds(y=trainDfR2$classe,k=10,list=True,returnTrain=True)
set.seed(3223)
folds <- createFolds(y=trainDfR2$classe,k=10,list=TRUE,returnTrain=TRUE)
View(trainDfR2)
View(trainDfR2)
thr = 0.97
dropCol = names(trainDfR1[,!(names(trainDfR1) == "classe")])
for (colName in names(trainDfR1[,!(names(trainDfR1) == "classe")])) {
x <- as.numeric(as.character(trainDfR1[[colName]]))
vld <- sum(is.finite(x))/length(trainDfR1[[colName]])
cat(sprintf("%s %f\n",colName,vld))
if (vld > thr) {
dropCol <- dropCol[!dropCol == colName]
}
}
cat(sprintf("Dropped columns %s",length(dropCol)))
trainDfR2 <- trainDf[,!(names(trainDfR1) %in% dropCol)]
thr = 0.97
dropCol = names(trainDfR1[,!(names(trainDfR1) == "classe")])
for (colName in names(trainDfR1[,!(names(trainDfR1) == "classe")])) {
cat(sprintf("%s",colName))
x <- as.numeric(as.character(trainDfR1[[colName]]))
vld <- sum(is.finite(x))/length(trainDfR1[[colName]])
cat(sprintf("%s %f\n",colName,vld))
if (vld > thr) {
dropCol <- dropCol[!dropCol == colName]
}
}
cat(sprintf("Dropped columns %s",length(dropCol)))
trainDfR2 <- trainDf[,!(names(trainDfR1) %in% dropCol)]
thr = 0.97
dropCol = names(trainDfR1[,!(names(trainDfR1) == "classe")])
for (colName in names(trainDfR1[,!(names(trainDfR1) == "classe")])) {
x <- as.numeric(as.character(trainDfR1[[colName]]))
vld <- sum(is.finite(x))/length(trainDfR1[[colName]])
if (vld > thr) {
dropCol <- dropCol[!dropCol == colName]
cat(sprintf("Keep %s %f\n",colName,vld))
} else {
cat(sprintf("Keep %s %f\n",colName,vld))
}
}
cat(sprintf("Dropped columns %s",length(dropCol)))
trainDfR2 <- trainDf[,!(names(trainDfR1) %in% dropCol)]
thr = 0.97
dropCol = names(trainDfR1[,!(names(trainDfR1) == "classe")])
for (colName in names(trainDfR1[,!(names(trainDfR1) == "classe")])) {
x <- as.numeric(as.character(trainDfR1[[colName]]))
vld <- sum(is.finite(x))/length(trainDfR1[[colName]])
if (vld > thr) {
dropCol <- dropCol[!dropCol == colName]
cat(sprintf("Keep %s %f\n",colName,vld))
} else {
cat(sprintf("Keep %s %f\n",colName,vld))
}
}
cat(sprintf("Dropped columns %s",length(dropCol)))
trainDfR2 <- trainDf[,!(names(trainDfR1) %in% dropCol)]
thr = 0.97
dropCol = names(trainDfR1[,!(names(trainDfR1) == "classe")])
for (colName in names(trainDfR1[,!(names(trainDfR1) == "classe")])) {
x <- as.numeric(as.character(trainDfR1[[colName]]))
vld <- sum(is.finite(x))/length(trainDfR1[[colName]])
if (vld > thr) {
dropCol <- dropCol[!dropCol == colName]
cat(sprintf("Keep %s %f\n",colName,vld))
} else {
cat(sprintf("Drop %s %f\n",colName,vld))
}
}
cat(sprintf("Dropped columns %s",length(dropCol)))
trainDfR2 <- trainDf[,!(names(trainDfR1) %in% dropCol)]
View(trainDfR1)
View(trainDfR1)
View(trainDfR1)
View(trainDfR1)
dropCol
thr = 0.97
dropCol = names(trainDfR1[,!(names(trainDfR1) == "classe")])
for (colName in names(trainDfR1[,!(names(trainDfR1) == "classe")])) {
x <- as.numeric(as.character(trainDfR1[[colName]]))
vld <- sum(is.finite(x))/length(trainDfR1[[colName]])
if (vld > thr) {
dropCol <- dropCol[!dropCol == colName]
cat(sprintf("Keep %s %f\n",colName,vld))
} else {
cat(sprintf("Drop %s %f\n",colName,vld))
}
}
cat(sprintf("Dropped columns %s",length(dropCol)))
trainDfR2 <- trainDfR1[,!(names(trainDfR1) %in% dropCol)]
View(trainDfR2)
View(trainDfR2)
set.seed(3223)
folds <- createFolds(y=trainDfR2$classe,k=10,list=TRUE,returnTrain=TRUE)
summary(folds)
folds[0]
folds[1]
trainDf3 <- trainDf2[folds[1]]
trainDf3 <- trainDfR2[folds[1]]
trainDfR2[1,]
trainDf3 <- trainDfR2[folds[2]]
trainDf3 <- trainDfR2[folds[2],]
folds[2]
sapply(folds,length)
inTrain <- createDataPartition(y=trainDfR2$classe,p=0.1,list=FALSE)
trainSubDf <- trainDfR2[inTrain]
trainSubDf <- trainDfR2[inTrain,]
View(trainSubDf)
View(trainSubDf)
cor(trainSubDf)
x <- nearZeroVar(trainDf3)
x <- nearZeroVar(trainSubDf)
x
x <- nearZeroVar(trainSubDf,saveMetrics = TRUE)
x
modFit <- train(factor(classe)~.,data=trainSubDf,method="rf")
preproc <- preProcess(trainSubDf[,-54],method="pca",thresh=0.85)
trainSubDf[,-54]
preproc <- preProcess(trainSubDf[,1:10],method="pca",thresh=0.85)
preproc <- preProcess(trainSubDf[,1],method="pca",thresh=0.85)
preproc <- preProcess(trainSubDf[,c(1,2)],method="pca",thresh=0.85)
nums <- sapply(trainSubDf, is.numeric)
nums
x <- as.data.frame(trainDfR1$classe)
x[,"xx"] <- trainDfR1$roll_belt
x <- names(trainDfR1)
x <- as.data.frame(trainDfR1$classe)
y <- names(trainDfR1)
y
y[0]
y[1]
y[2]
x[y[2]] <- trainDfR1$roll_belt
thr = 0.97
trainDfR2 <- as.data.frame(trainDfR1$classe)
for (colName in names(trainDfR1[,!(names(trainDfR1) == "classe")])) {
x <- as.numeric(as.character(trainDfR1[[colName]]))
vld <- sum(is.finite(x))/length(trainDfR1[[colName]])
if (vld > thr) {
trainDfR2[,colName] <- x
} else {
cat(sprintf("Drop %s %f\n",colName,vld))
}
}
View(trainDfR2)
View(trainDfR2)
is.numeric(trainDfR2)
nums <- sapply(trainDfR2, is.numeric)
nums
set.seed(3223)
folds <- createFolds(y=trainDfR2$classe,k=10,list=TRUE,returnTrain=TRUE)
inTrain <- createDataPartition(y=trainDfR2$classe,p=0.1,list=FALSE)
trainSubDf <- trainDfR2[inTrain,]
set.seed(3223)
inTrain <- createDataPartition(y=trainDfR2$classe,p=0.1,list=FALSE)
trainSubDf <- trainDfR2[inTrain,]
View(trainDfR2)
View(trainDfR2)
set.seed(3223)
inTrain <- createDataPartition(y=trainDfR2$trainDfR1$classe,p=0.1,list=FALSE)
trainSubDf <- trainDfR2[inTrain,]
trainDfR2$trainDfR1$classe
trainDfR2$trainDfR1$classe
trainDfR2$
trainDfR2[,1]
set.seed(3223)
inTrain <- createDataPartition(y=trainDfR2[,1],p=0.1,list=FALSE)
trainSubDf <- trainDfR2[inTrain,]
preproc <- preProcess(trainDfR2[,-1],method="pca",thresh=0.85)
summary(preproc)
preproc <- preProcess(trainSubDf[,-1],method="pca",thresh=0.85)
trainPc <- predict(preproc,trainSubDf[,-1])
modFit <- train(trainSubDf[,-1]~trainPc,data=trainSet,method="rf")
modFit <- train(trainSubDf[,-1]~trainPc,method="rf")
modFit <- train(trainSubDf[,-1]~trainPc,method="rf",data=trainPc)
y <- trainSubDf[,-1]
y <- trainSubDf[,1]
modFit <- train(trainSubDf[,1]~trainPc,method="rf",data=trainPc)
modFit <- train(trainSubDf[,1]~.,data=trainPc,method="rf",data=trainPc)
modFit <- train(trainSubDf[,1]~.,data=trainPc,method="rf")
