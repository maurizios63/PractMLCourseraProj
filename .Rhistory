View(training)
mod2 <- data.frame(x,training$diagnosis)
View(mod2)
View(mod2)
View(mod2)
View(mod2)
pred2 <- trainIndex(diagnosis~.,data=mod2,method="glm")
pred2 <- train(diagnosis~.,data=mod2,method="glm")
View(mod2)
View(mod2)
pred2 <- train(training.diagnosis~.,data=mod2,method="glm")
pred2 <- train(diagnosis~.,data=training,method="glm")
install.packages("e1071")
pred2 <- train(diagnosis~.,data=training,method="glm")
pred2 <- train(training.diagnosis~.,data=mod2,method="glm")
testpred2 <- testing[,glob2rx("IL*")]
View(testing)
View(testing)
testpred2 <- testing[,grepl("^IL",names(testing))]
testPc2 <- predictors(pred2,testpred2)
source('~/PractQ2-4.R', echo=TRUE)
confusionMatrix(testing$diagnosis,predict(modelNoPc,testNoPc))
trainNoPc <- training[,grepl("^IL",names(training))]
testNoPc <- training[,grepl("^IL",names(testing))]
View(testing)
source('~/PractQ2-4.R', echo=TRUE)
source('~/PractQ2-4.R', echo=TRUE)
testPca <- predict(modelPca,testNoPc)
testPca <- predict(modelPca,testNoPc)
testPca <- predict(preprocPca,testNoPc)
testPca <- predict(modelPca,testNoPc
)
testPca <- predict(preprocPca,testNoPc)
confusionMatrix(testing$diagnosis,predict(modelPca,testPca))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
View(segmentationOriginal)
trainDf <- segmentationOriginal(case==Train)
traindDf = subset(segmentationOriginal,Case == Train)
traindDf = subset(segmentationOriginal,Case == "Train")
testDf = subset(segmentationOriginal,Case == "Train")
modFit <- train(Class~.,data=traindDf)
ยง
modFit <- train(Class~.,data=traindDf,method=rpart)
library(rpart)
modFit <- train(Class~.,data=traindDf,method=rpart)
modFit <- train(Class~.,data=traindDf,method=lm)
modFit <- train(Class~.,data=traindDf,method="rpart")
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(rpart.plot)
install.packages("rpart.plot")
fancyRpartPlot(modFit$finalModel)
View(traindDf)
View(traindDf)
print(modFit$finalModel)
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
View(olive)
View(olive)
olive = olive[,-1]
View(olive)
View(olive)
modFit3 <- train(Area~.,data=olive,method="rpart")
newdata = as.data.frame(t(colMeans(olive)))
View(newdata)
View(newdata)
print(modFit3$finalModel)
modFit3 <- train(Area~.,data=olive,method="rpart")
predict(modFIt3,newdata)
predict(modFit3,newdata)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
View(trainSA)
View(trainSA)
testSa.names
testSa.names()
trainSA.names
names(trainSA)
modFit <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
library(caret)
modFit <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
print modFit
summary(modFit)
prediction <- predict(modFit,trainSA)
prediction
values = trainSA$chd
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
missClass(values,prediction)
predictionTest <- predict(modFit,testSA)
valuesTest <- testSA$chd
missClass(valuesTest,predictionTest)
missClass(valuesSA,predictionSA)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
$
source('~/.active-rstudio-document', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source('~/ML_Q4_W*.R', echo=TRUE)
source('~/ML_Q4_W*.R', echo=TRUE)
data(vowel.train)
data(vowel.test)
modFit <- train(y~~.,data=vowel.train,method="rf")
View(vowel.train)
View(vowel.train)
modFit <- train(y~.,data=vowel.train,method="rf")
modFit <- train(y~.,data=vowel.train,method="rf")
x <- varImp(modFit)
varImp(modFit)
print(modFit)
print(modFit,useModel=true)
varImp(modFit,useModel="true")
varImp(modFit$finalModel,useModel="true")
modFit <- train(y~.,data=vowel.train,method="rf",importance=True)
modFit <- train(y~.,data=vowel.train,method="rf",importance=True)
modFit <- train(y~.,data=vowel.train,method="rf")
varImp(modFit$finalModel,useModel="true")
x <- vowel.train
modFit <- train(y~.,data=x,method="rf",importance=TRUE)
varImp(modFit$finalModel,useModel="true")
y <- varImp(modFit$finalModel,useModel="true")
View(y)
View(y)
order(y)
order(y,decreasing=TRUE)
trainSet <- vowel.train
set.seed(33833)
View(trainSet)
View(trainSet)
modFit <- train(y~.,data=trainSet,method="rf",importance=True)
modFit <- train(y~.,data=trainSet,method="rf",importance=True)
x <- vowel.train
modFit <- train(y~.,data=x,method="rf",importance=TRUE)
modFit2 <- train(y~.,data=trainSet,method="rf",importance=TRUE)
View(y)
View(y)
View(y)
z <- varImp(modFit)
z <- varImp(modFit2)
data(vowel.train)
data(vowel.test)
trainSet <- vowel.train
set.seed(33833)
modFit <- train(y~.,data=trainSet,method="rf",importance=True)
warnings()
modFit <- train(y~.,data=trainSet,method="rf",importance=TRUE)
imp <- varImp(modFit)
order(imp,decreasing=TRUE)
View(trainSet)
View(trainSet)
summary(imp)
imp <- varImp(modFit)
imp <- varImp(modFit$finalModel)
View(imp)
View(imp)
order(imp,decreasing=TRUE)
set.seed(33833)
modFit <- train(y~.,data=trainSet,method="rf",importance=TRUE)
imp <- varImp(modFit$finalModel,useModel=TRUE)
order(imp,decreasing=TRUE)
order(varImp(modFit$finalModel,useModel=TRUE))
order(varImp(modFit$finalModel,useModel=TRUE))
imp <- varImp(modFit$finalModel,useModel=TRUE)
View(imp)
View(imp)
imp <- varImp(modFit,scale=TRUE)
imp
testSet <- vowel.test
set.seed(33833)
modFit <- train(y~.,data=trainSet,method="rf",importance=TRUE)
summary(modFit)
summary(modFit.importance)
varImp(modFit)
varImp(modFit)
varImp(modFit$finalModel)
varImp(modFit$finalModel,scale=TRUE)
importance(modFit)
importance(modFit$finalModel)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
#trainSet <- vowel.train
set.seed(33833)
modFit <- train(y~.,data=vowel.train,method="rf",importance=TRUE)
imp <- varImp(modFit,scale=TRUE)
#order(imp,decreasing=TRUE)
imp
varImp(modFit$finalModel)
modFit <- train(factor(y)~.,data=vowel.train,method="rf",importance=TRUE)
varImp(modFit)
varImp(modFit$finalModel)
varImp(modFit$finalModel,scale=TRUE)
varImp(modFit$,scale=TRUE)
varImp(modFit,scale=TRUE)
View(vowel.train)
View(vowel.train)
library(caret)
setwd("Documents/RCourse/CourseraMLProject/")
list.files()
setwd("../PractMLCourseraProj/")
list.files()
trainDf <- read.csv2("../MLProject/pml-training.csv",sep=",")
drop <- c("user_name","raw_timestamp_part_1","raw_timestamp_part_2",
"cvtd_timestamp","new_window","num_window")
trainDfR1 <- trainDf[,!(names(trainDf) %in% drop)]
thr = 0.97
trainDfR2 <- as.data.frame(trainDfR1$classe)
for (colName in names(trainDfR1[,!(names(trainDfR1) == "classe")])) {
x <- as.numeric(as.character(trainDfR1[[colName]]))
vld <- sum(is.finite(x))/length(trainDfR1[[colName]])
if (vld > thr) {
trainDfR2[,colName] <- x
} else {
cat(sprintf("Drop %s %f\n",colName,vld))
}
}
inTrainRf <- createDataPartition(y=trainDfR2[,1],p=0.1,list=FALSE)
View(inTrainRf)
View(inTrainRf)
trainSubDf <- trainDfR2[inTrainRPart,]
trainSubDf <- trainDfR2[inTrainRf,]
View(trainSubDf)
View(trainSubDf)
for (colName in names(trainDfR1[,!(names(trainDfR1) == "classe")])) {
thr = 0.97
trainDfR2 <- as.data.frame(trainDfR1$classe)
names(trainDfR2)[1] <- "classe"
for (colName in names(trainDfR1[,!(names(trainDfR1) == "classe")])) {
x <- as.numeric(as.character(trainDfR1[[colName]]))
vld <- sum(is.finite(x))/length(trainDfR1[[colName]])
if (vld > thr) {
trainDfR2[,colName] <- x
} else {
cat(sprintf("Drop %s %f\n",colName,vld))
}
}
View(trainDfR2)
View(trainDfR2)
View(trainDfR2)
View(trainDfR2)
View(trainDfR2)
View(trainDfR2)
thr = 0.97
trainDfR2 <- as.data.frame(trainDfR1$classe)
names(trainDfR2)[1] <- "classe"
for (colName in names(trainDfR1[,!(names(trainDfR1) == "classe")])) {
x <- as.numeric(as.character(trainDfR1[[colName]]))
vld <- sum(is.finite(x))/length(trainDfR1[[colName]])
if (vld > thr) {
trainDfR2[,colName] <- x
} else {
cat(sprintf("Drop %s %f\n",colName,vld))
}
}
View(trainDfR2)
View(trainDfR2)
inTrainRPart <- createDataPartition(y=trainDfR2[,1],p=0.9,list=FALSE)
trainSubDf <- trainDfR2[inTrainRPart,]
vldSubDf <- trainDfR2[-inTrainRPart,]
modFitRpart <- train(trainSubDf$classe~.,data=trainSubDf,method="rpart")
confusionMatrix(vldSubDf$classe,predict(modFitRpart,vldSubDf))
View(vldSubDf)
View(vldSubDf)
trainDfR2[,1]
summary(trainDfR2)
summary(trainDfR2$classe)
summary(trainDfR2[,1])
inTrainRPart <- createDataPartition(y=trainDfR2[,1],p=0.8,list=FALSE)
trainSubDf <- trainDfR2[inTrainRPart,]
vldSubDf <- trainDfR2[-inTrainRPart,]
summary(trainSubDf$classe)
summary(vldSubDf$classe)
modFitRpart <- train(trainSubDf$classe~.,data=trainSubDf,method="rpart")
confusionMatrix(vldSubDf$classe,predict(modFitRpart,vldSubDf))
library(randomForest)
createDataPartition
inTrainRf <- createDataPartition(y=trainDfR2[,1],p=0.1,list=FALSE)
summary(inTrainRf)
summary(inTrainRf$classe)
trainSubDf <- trainDfR2[inTrainRf,]
summary(trainSubDf$classe)
modFitRf <- randomForest(classe~.,data=trainSubDf,ntree=10,do.trace=TRUE)
modFitRf <- randomForest(classe~.,data=trainSubDf,ntree=1000,do.trace=TRUE)
vldSubDf <- trainDfR2[-inTrainRf,]
confusionMatrix(vldSubDf$classe,predict(modFitRpart,vldSubDf))
inTrainRf <- createDataPartition(y=trainDfR2[,1],p=0.9,list=FALSE)
trainSubDf <- trainDfR2[inTrainRf,]
vldSubDf <- trainDfR2[-inTrainRf,]
modFitRf <- randomForest(classe~.,data=trainSubDf,ntree=1000,do.trace=TRUE)
confusionMatrix(vldSubDf$classe,predict(modFitRpart,vldSubDf))
myTrainDf <- trainDfR1
inTrainRf <- createDataPartition(y=myTrainDf[,1],p=0.9,list=FALSE)
trainSubDf <- myTrainDf[inTrainRf,]
vldSubDf <- myTrainDf[-inTrainRf,]
modFitRf <- randomForest(classe~.,data=trainSubDf,ntree=1000,do.trace=10)
confusionMatrix(vldSubDf$classe,predict(modFitRpart,vldSubDf))
myTrainDf <- trainDfR2
inTrainRf <- createDataPartition(y=myTrainDf[,1],p=0.9,list=FALSE)
trainSubDf <- myTrainDf[inTrainRf,]
vldSubDf <- myTrainDf[-inTrainRf,]
#modFitRf <- randomForest(classe~.,data=trainSubDf,ntree=1000,do.trace=1)
modFitRf <- train(classe~.,data=trainSubDf,ntree=1000,do.trace=10,method="rf")
myTrainDf <- trainDfR2
inTrainRf <- createDataPartition(y=myTrainDf[,1],p=0.1,list=FALSE)
trainSubDf <- myTrainDf[inTrainRf,]
vldSubDf <- myTrainDf[-inTrainRf,]
#modFitRf <- randomForest(classe~.,data=trainSubDf,ntree=1000,do.trace=1)
modFitRf <- train(classe~.,data=trainSubDf,ntree=10,do.trace=10,method="rf")
confusionMatrix(vldSubDf$classe,predict(modFitRpart,vldSubDf))
myTrainDf <- trainDfR2
inTrainRf <- createDataPartition(y=myTrainDf[,1],p=0.1,list=FALSE)
trainSubDf <- myTrainDf[inTrainRf,]
vldSubDf <- myTrainDf[-inTrainRf,]
#modFitRf <- randomForest(classe~.,data=trainSubDf,ntree=1000,do.trace=1)
modFitRf <- train(classe~.,data=trainSubDf,do.trace=10,method="rf")
confusionMatrix(vldSubDf$classe,predict(modFitRpart,vldSubDf))
save(modFitRf,"modFitRfSimple.data")
testDf <- read.csv2("../MLProject/pml-testing.csv",sep=",")
View(testDf)
View(testDf)
drop <- c("user_name","raw_timestamp_part_1","raw_timestamp_part_2",
ยง
drop <- c("user_name","raw_timestamp_part_1","raw_timestamp_part_2",
"cvtd_timestamp","new_window","num_window")
testDfR1 <- testDf[,!(names(testDf) %in% drop)]
thr = 0.97
testDfR2 <- as.data.frame(trainDfR1$classe)
names(testDfR2)[1] <- "classe"
for (colName in names(trainDfR1[,!(names(testDfR1) == "classe")])) {
x <- as.numeric(as.character(testDfR1[[colName]]))
vld <- sum(is.finite(x))/length(testDfR1[[colName]])
if (vld > thr) {
testDfR2[,colName] <- x
} else {
cat(sprintf("Drop %s %f\n",colName,vld))
}
}
thr = 0.97
testDfR2 <- as.data.frame(testDfR1$classe)
names(testDfR2)[1] <- "classe"
for (colName in names(testDfR1[,!(names(testDfR1) == "classe")])) {
x <- as.numeric(as.character(testDfR1[[colName]]))
vld <- sum(is.finite(x))/length(testDfR1[[colName]])
if (vld > thr) {
testDfR2[,colName] <- x
} else {
cat(sprintf("Drop %s %f\n",colName,vld))
}
}
View(testDfR1)
View(testDfR1)
thr = 0.97
testDfR2 <- as.data.frame(testDfR1$X)
names(testDfR2)[1] <- "classe"
for (colName in names(testDfR1[,!(names(testDfR1) == "classe")])) {
x <- as.numeric(as.character(testDfR1[[colName]]))
vld <- sum(is.finite(x))/length(testDfR1[[colName]])
if (vld > thr) {
testDfR2[,colName] <- x
} else {
cat(sprintf("Drop %s %f\n",colName,vld))
}
}
thr = 0.97
testDfR2 <- as.data.frame(testDfR1$X)
names(testDfR2)[1] <- "classe"
for (colName in names(testDfR1[,!(names(testDfR1) == "classe")])) {
x <- as.numeric(as.character(testDfR1[[colName]]))
vld <- sum(is.finite(x))/length(testDfR1[[colName]])
if (vld > thr) {
testDfR2[,colName] <- x
cat(sprintf("Keep %s %f\n",colName,vld))
}
}
colnames(testDfR2)
colnames(trainDfR2)
thr = 0.97
testDfR2 <- as.data.frame(testDfR1$X)
names(testDfR2)[1] <- "X"
for (colName in names(testDfR1[,!(names(testDfR1) == "X")])) {
x <- as.numeric(as.character(testDfR1[[colName]]))
vld <- sum(is.finite(x))/length(testDfR1[[colName]])
if (vld > thr) {
testDfR2[,colName] <- x
cat(sprintf("Keep %s %f\n",colName,vld))
}
}
colnames(testDfR2)
colnames(trainDfR2)
View(testDf)
View(testDf)
View(trainDf)
View(trainDf)
library(caret)
trainDf <- read.csv2("../MLProject/pml-training.csv",sep=",")
drop <- c("user_name","raw_timestamp_part_1","raw_timestamp_part_2",
"cvtd_timestamp","new_window","num_window","X")
trainDfR1 <- trainDf[,!(names(trainDf) %in% drop)]
thr = 0.97
trainDfR2 <- as.data.frame(trainDfR1$classe)
names(trainDfR2)[1] <- "classe"
for (colName in names(trainDfR1[,!(names(trainDfR1) == "classe")])) {
x <- as.numeric(as.character(trainDfR1[[colName]]))
vld <- sum(is.finite(x))/length(trainDfR1[[colName]])
if (vld > thr) {
trainDfR2[,colName] <- x
} else {
cat(sprintf("Drop %s %f\n",colName,vld))
}
}
colnames(trainDfR2)
myTrainDf <- trainDfR2
inTrainRf <- createDataPartition(y=myTrainDf[,1],p=0.1,list=FALSE)
trainSubDf <- myTrainDf[inTrainRf,]
vldSubDf <- myTrainDf[-inTrainRf,]
#modFitRf <- randomForest(classe~.,data=trainSubDf,ntree=1000,do.trace=1)
modFitRf <- train(classe~.,data=trainSubDf,do.trace=100save,method="rf")
confusionMatrix(vldSubDf$classe,predict(modFitRpart,vldSubDf))
View(trainSubDf)
View(trainSubDf)
colnames(trainSubDf)
View(vldSubDf)
View(vldSubDf)
View(testDfR1)
View(testDfR1)
modFitRf <- train(classe~.,data=trainSubDf,do.trace=100save,method="rf")
modFitRf <- train(classe~.,data=trainSubDf,do.trace=100,method="rf")
View(testDfR1)
View(testDfR1)
View(testDfR1)
View(testDfR1)
confusionMatrix(vldSubDf$classe,predict(modFitRpart,vldSubDf))
confusionMatrix(vldSubDf$classe,predict(modFitRf,vldSubDf))
saveRDS(modFitRf,"modFitRf.data")
preproc <- preProcess(trainSubDf[,-1],method="pca",thresh=0.9)
trainPc <- predict(preproc,trainSubDf[,-1])
modFitRfPc <- train(trainSubDf[,1]~.,data=trainPc,do.trace=100,method="rf")
vldPc <- predict(preproc,vldSubDf[,-1])
confusionMatrix(vldSubDf[,1],predict(modFitRfPc,vldPc))
modFitRf
modFitRfPc
testDf <- read.csv2("../MLProject/pml-testing.csv",sep=",")
testDfR1 <- subset(testDf,select = colnames(trainDfR2)[-1])
for (colName in names(testDfR1)) {
testDfR1[[colName]] <- as.numeric(as.character(testDfR1[[colName]]))
}
expTest <- predict(modFitRf,testDfR1)
#expPc <- predict(preproc,testDfR1)
#expTest <- predict(modFit,expPc)
expTest
save(expTest,"exp01.txt")
saveRDS(expTest,"exp01.txt")
inTrainRf <- createDataPartition(y=myTrainDf[,1],p=pct,list=FALSE)
myTrainDf <- trainDfR2
pct <- 0.5
inTrainRf <- createDataPartition(y=myTrainDf[,1],p=pct,list=FALSE)
trainSubDf <- myTrainDf[inTrainRf,]
vldSubDf <- myTrainDf[-inTrainRf,]
#modFitRf <- randomForest(classe~.,data=trainSubDf,ntree=1000,do.trace=1)
modFitRf <- train(classe~.,data=trainSubDf,do.trace=100,method="rf")
confusionMatrix(vldSubDf$classe,predict(modFitRf,vldSubDf))
saveRDS(modFitRf,"modFitRf0.5.data")
expTest_05 <- predict(modFitRf,testDfR1)
expTest_05
saveRDS(expTest_05,"exp05.txt")
for (value in expTest_05) {
cat(value)
}
for (value in expTest_05) {
cat(sprintf("-> %s",value))
}
for (value in expTest_05) {
cat(sprintf("-> %s\n",value))
}
n = length(expTest_05)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
n = length(expTest_05)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
expTest_05[1]
n = length(expTest_05)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(expTest_05[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
